// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];
    PARTS:
    // Get the correct load bit for screen, keyboard, and 16K memory
    // Use Dmux chip and addresses to find the load for the correct chip. 11 is the begining address for the keyboard, 10 is the beginning address for the screen, and 01 or 00 for the RAM 16K
    DMux(in=load, sel=address[14], a=mem, b=oneOut);
    DMux(in=oneOut, sel=address[13], a=screenLoad, b=kbdLoad);

    //mem is the load bit for memory
    // screenLoad is the load bit for the screen
    // kbdLoad is the load bit for the keyboard-- which is not required because the keyboard doesn't have a load bit or input as it comes from the user
    // Load and get outputs
    Screen(in=in, load=screenLoad, address=address[0..12], out=screenOut);
    RAM16K(in=in, load=mem, address=address[0..13], out=out16k);
    Keyboard(out=keyOut);
    // Use Mux chip to get the correct output. Keyboard is 110000000000000 and Screen address is 010000000000000. Use address bits as selectors again
    Mux16(a=screenOut, b=keyOut, sel=address[13], out=screenOutOrKeyOut);
    Mux16(a=out16k, b=screenOutOrKeyOut, sel=address[14], out=out);
}