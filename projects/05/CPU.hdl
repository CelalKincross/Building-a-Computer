// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    // Use the three destination bits to determin which reg will take the ALU output as input - A, D , or M.
    DMux(in=true, sel=instruction[15], a=typeA, b=typeC);
    Or(a=typeA, b=instruction[5], out=aInstr);
    And(a=typeC, b=instruction[4], out=cInstr);

    // A register configuration
    Mux16(a=aluout, b=instruction, sel=typeA, out=regA);
    ARegister(in=regA, load=aInstr, out=outa, out[0..14]=addressM);

    // D register configuration
    Mux16(a=outa, b=inM, sel=instruction[12], out=aluInput);
    DRegister(in=aluout, load=cInstr, out=dregout);

    // Alu config
    ALU(x=dregout, y=aluInput, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluout, out=outM, zr=zero, ng=neg);
    And(a=typeC, b=instruction[3], out=writeM);
    
    

    // Program Counter
    // We need to create the jump functionality- JMP in all cases, JGT jump when value greater than 0, JEQ jump when value equals zero, JGE greater than or equal to 0, JLT less than 0, JNE not equal to zero, JLE less than or equal to 0. Use zx and ng output from the alu to help compare the results from the input with the jump command. Note: JGT and JLE covers all jump conditions

    /// Jump logic
    Or(a=zero, b=neg, out=leqzero); // out <= 0
    Not(in=leqzero, out=pos);  //out > 0

    And(a=instruction[0], b=pos, out=jgt);  // out > 0 jump
    And(a=instruction[1], b=zero, out=jeq); // out = 0 jump
    And(a=instruction[2], b=neg, out=jlt);  // out < 0 jump
    Or(a=jeq, b=jlt, out=jle);              // if out <= 0 jump
    Or(a=jgt, b=jle, out=jmp);              // all jumps

    And(a=jmp, b=typeC, out=doJmp);
    Not(in=doJmp, out=noJmp);
    PC(in=outa, load=doJmp, inc=noJmp, reset=reset, out[0..14]=pc);
}